@page "/"

<PageTitle>Dashboard</PageTitle>

@using Dashboard.Data

@inject DataService ForecastService

<h1 class="text-center mb-4">Dashboard</h1>

@if (data == null)
{
    @if (couldNotConnect)
    {
      <p><em>Kunne ikke forbinde til server... Prøv igen</em></p>
    }
    else
    {
      <p><em>Loading...</em></p>
    }
}
else
{
    <div class="container">
      <div class="row">
        <div class="col-4">
            <div class="bg-light text-dark p-3 me-3 rounded" style="width: 100%;">
            <h2 class="text-center mb-0">Aktuel Vejr</h2>
            @if (data.weatherData.updated == null)
            {
              <p>Aktuel vejrinformation er ikke tilgængelig</p>
            }
            else
            {
              <p class="text-center fw-light" style="font-size: 0.75rem">Sidst opdateret: @data.weatherData.updated</p>
              <p>Location: @data.weatherData.location</p>
              <p>Sol oppe?: @((data.weatherData.sunAvaliable) ? "Ja" : "Nej")</p>
              <p>Skydække: @(data.weatherData.cloudCover)%</p>
              <p>Temperatur: @(data.weatherData.temperature)°C</p>
            }
          </div>
        </div>
        <div class="col-4">
          <div class="bg-light text-dark p-3 me-3 rounded" style="width: 100%;">
            <h2 class="text-center mb-0">Vejrudsigt</h2>
            @if (data.weatherData.updated == null)
            {
              <p>Vejrudsigt er ikke tilgængelig</p>
            }
            else
            {
              <p class="text-center fw-light" style="font-size: 0.75rem">Sidst opdateret: @data.weatherData.updated</p>
              @foreach (var forecast in data.weatherData.weatherForecast)
              {
                <p class="fw-bold mb-0">@forecast.date</p>
                <p class="mb-0">Skydække: @(forecast.cloudCover)%</p>
                <p class="mb-3">Temperatur: @(forecast.temperature)°C</p>
              }
            }
          </div>
        </div>
        <div class="col-4">
            <div class="bg-light text-dark p-3 rounded" style="width: 100%;">
            <h2 class="text-center mb-0">Strøm-information</h2>
            @if (data.inverterData.updated == null)
            {
              <p>Strøm-information er ikke tilgængelig</p>
            }
            else
            {
              <p class="text-center fw-light" style="font-size: 0.75rem">Sidst opdateret: @data.inverterData.updated</p>
              <p>Strøm produktion den sidste time?: @((data.inverterData.powerProductionLastHour) ? "Ja" : "Nej")</p>
              @if (data.inverterData.powerProductionLastHour)
              {
                  <p>Watt: @(data.inverterData.powerProduction)W</p>
              }
            }
          </div>
        </div>
        <div class="col-4 mt-3">
          <div class="bg-light text-dark p-3 rounded" style="width: 100%;">
            <h2 class="text-center mb-0">Kontor temperatur</h2>
            @if (data.roomTempData.updated == null)
            {
               <p>Kontor temperatur er ikke tilgængelig</p>
            }
            else
            {
                <p class="text-center fw-light" style="font-size: 0.75rem">Sidst opdateret: @data.roomTempData.updated?.ToLocalTime()</p>
                <p>Temperatur: @(data.roomTempData.temperature)°C</p>
            }
          </div>
        </div>
        <div class="col-4 mt-3">
          <div class="bg-light text-dark p-3 rounded" style="width: 100%;">
            <h2 class="text-center mb-0">Elpriser</h2>
            @if (data.energyPrice.updated == null)
            {
              <p>Elpriser er ikke tilgængelig</p>
            }
            else
            {
              <p class="text-center fw-light" style="font-size: 0.75rem">Sidst opdateret: @data.energyPrice.updated</p>
              <p>Pris: @(data.energyPrice.energyPrice) DKK</p>
            }
          </div>
        </div>
      </div>
    </div>
}


@code {
    private ReturnData data;
    private bool requestDone = false;
    private bool couldNotConnect = false;
    ReturnData oldData = null;

    protected async void CallApi()
    {
        try
        {
            data = await DataService.GetDataAsync();
            couldNotConnect = false;
            if (data != oldData)
            {
                oldData = data;
                StateHasChanged();
            }
        } catch
        {
            couldNotConnect = true;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CallApi();

        //set timer
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

        while (await timer.WaitForNextTickAsync())
        {
            CallApi();
        }
    }
}
